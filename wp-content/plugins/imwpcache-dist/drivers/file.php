<?php
 namespace imwpcache\drivers; class file implements driver { protected $cacheDir; protected $isExpire = false; public function __construct() { $this->cacheDir = dirname(dirname(dirname(__DIR__))) . '/cache'; if (!file_exists($this->cacheDir)) { mkdir($this->cacheDir); } } public function connect($config) { return true; } public function set($key, $value, $expire) { $path = $this->getCachePath($key); $expire = time() + $expire; $content = gzencode("{$expire}{$value}", 9); $fp = fopen($path, 'w'); fwrite($fp, $content); fclose($fp); @unlink(dirname(__DIR__) . '/lock'); $this->setStats(false, strlen($content)); } public function get($key) { $path = $this->getCachePath($key); if (!file_exists($path)) { return false; } $content = gzdecode(file_get_contents($path)); $expire = substr($content, 0, 10); if (time() > $expire && !file_exists(dirname(__DIR__) . '/lock')) { $this->isExpire = true; } $content = substr($content, 10); $this->setStats(true); return $content; } public function delete($key) { $path = $this->getCachePath($key); if (!file_exists($path)) { return true; } @unlink($path); } public function exists($key) { $path = $this->getCachePath($key); if (file_exists($path)) { return true; } return false; } public function flush($dir = '') { if ($dir == '') { $dir = $this->cacheDir; } $files = array_diff(scandir($dir), array('.','..')); foreach ($files as $file) { (is_dir("$dir/$file")) ? $this->flush("$dir/$file") : unlink("$dir/$file"); } return rmdir($dir); } public function getStats() { if (file_exists($this->cacheDir . '/stats')) { $stats = json_decode(file_get_contents($this->cacheDir . '/stats'), true); } else { $stats = array( 'count' => 0, 'size' => 0, 'hits' => 0, 'misses' => 0, 'get' => 0, 'set' => 0, ); } return $stats; } public function isExpire($key = null) { return $this->isExpire; } protected function setStats($isHit=true, $size=0) { if (file_exists($this->cacheDir . '/stats')) { $stats = json_decode(file_get_contents($this->cacheDir . '/stats'), true); } else { $stats = array( 'count' => 0, 'size' => 0, 'hits' => 0, 'misses' => 0, 'get' => 0, 'set' => 0, ); } if ($isHit) { $stats['hits'] += 1; $stats['get'] += 1; } else { $stats['misses'] += 1; $stats['get'] += 1; $stats['set'] += 1; $stats['count'] += 1; $stats['size'] += $size; } file_put_contents($this->cacheDir . '/stats', json_encode($stats)); } protected function getCachePath($key) { $hash = md5($key); $s1 = substr($hash, 0, 2); $s2 = substr($hash, 2, 2); $cacheDir = sprintf('%s/%s/%s', $this->cacheDir, $s1, $s2); if (!file_exists($cacheDir)) { mkdir($cacheDir, 0775, true); } return $cacheDir . '/' . $hash . '.cac'; } }