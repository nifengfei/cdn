<?php
 namespace imwpf\apis; class Updater { public function __construct() { $this->UpdaterModule = new \imwpf\modules\Updater(); } public function start() { add_action('wp_ajax_imwpf_updater', array($this, 'update')); } public function update() { $subAction = isset($_REQUEST['sub_action']) ? $_REQUEST['sub_action'] : ''; switch ($subAction) { case 'check': $result = $this->check(); break; case 'do_update': $result = $this->doUpdate(); break; default: $result = $this->check(); break; } echo json_encode($result); die(); } public function check() { $name = sanitize_text_field($_REQUEST['name']); $cert = sanitize_text_field($_REQUEST['cert']); $type = sanitize_text_field($_REQUEST['type']); if (!$name || !$type) { return false; } if ($type == 'theme') { $this->UpdaterModule->setThemeName($name); } else if ($type == 'plugin') { $this->UpdaterModule->setPluginName($name); } else { return false; } $this->UpdaterModule->setCert($cert); return $this->UpdaterModule->getLatestVersion(); } public function doUpdate() { $name = sanitize_text_field($_REQUEST['name']); $cert = sanitize_text_field($_REQUEST['cert']); $type = sanitize_text_field($_REQUEST['type']); if (!$name || !$type) { return false; } if ($type == 'theme') { $this->UpdaterModule->setThemeName($name); } else if ($type == 'plugin') { $this->UpdaterModule->setPluginName($name); } else { return false; } $this->UpdaterModule->setCert($cert); try { $msg = $this->UpdaterModule->update(); $version = $this->UpdaterModule->getAllLatestVersion(); update_option('imwp_update_check', json_encode($version)) && add_option('imwp_update_check', json_encode($version)); $result = array( 'errno' => 0, 'data' => $msg, ); } catch (\Exception $e) { $result = array( 'errno' => $e->getCode(), 'msg' => $e->getMessage(), ); } return $result; } }