<?php
 namespace imwpf\builtin; class Optimizer { protected $option; public function start() { $Optimizer = new \imwpf\modules\Optimizer(); $option = $this->getOption(); if ($option['d-wpjson'] == 1) { $Optimizer->disableWPJSON(); } } public function getOption() { if ($this->option) { return $this->option; } $this->option = get_option('imwpf_optimizer'); if (!$this->option) { $this->option = array( 'd-wpjson' => 0, 'd-revision' => 0, ); } else { $this->option = json_decode($this->option, true); } return $this->option; } public function handleOption() { if (!empty($_POST)) { $options = array( 'd-wpjson' => (int) $_POST['d-wpjson'], 'd-revision' => (int) $_POST['d-revision'], ); if (!update_option('imwpf_optimizer', json_encode($options))) { add_option('imwpf_optimizer', json_encode($options)); } return $options; } return $this->getOption(); } public function handleWPCron() { $ret = array(); if (defined('DISABLE_WP_CRON') && DISABLE_WP_CRON) { $ret['d-wpcron'] = '1'; } else { $ret['d-wpcron'] = '0'; } if (empty($_POST)) { return $ret; } $now = date('Y-m-d H:i:s'); $code = "<?php //create at $now \n"; if ($_POST['d-wpcron'] == '1') { $code .= '!defined("DISABLE_WP_CRON") && define("DISABLE_WP_CRON", true);' . "\n"; $ret['d-wpcron'] = '1'; } else { $code .= ''; $ret['d-wpcron'] = '0'; } file_put_contents(dirname(__DIR__) . '/config.php', $code); return $ret; } }