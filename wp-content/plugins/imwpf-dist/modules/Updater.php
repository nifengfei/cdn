<?php
 namespace imwpf\modules; class Updater { protected $cert; protected $name; protected $appDir; protected $currentVersion; protected $api = 'http://www.imwpweb.com'; public function setThemeName($name) { $this->name = $name; $this->appDir = ABSPATH . 'wp-content/themes/' . $name; $Theme = new \WP_Theme($this->appDir . '/style.css', $this->appDir); $this->Version = $Theme->get('version'); return $this; } public function setPluginName($name) { $this->name = $name; $this->appDir = ABSPATH . 'wp-content/plugins/' . $name; if (!function_exists('get_plugins')) { require_once ABSPATH . '/wp-admin/includes/plugin.php'; } $plugins = get_plugins(); foreach ($plugins as $plugin) { if ($plugin['Name'] == $name) { $this->Version = $plugin['Version']; } } return $this; } public function setCert($cert) { $this->cert = $cert; } public function getLatestVersion() { $params = array( 'service' => 'updater', 'action' => 'get_latest_version', 'theme' => $this->name, 'cert' => $this->cert ); $url = $this->api . '?' . http_build_query($params); $result = HTTP::get($url, 30); $result = json_decode($result, true); if (version_compare($this->Version, $result['data']['version'], '<')) { $result['msg'] = '有新的版本'; } else { $result['msg'] = '暂无新的版本'; } return $result; } public function getAllLatestVersion() { if (!function_exists('get_plugins')) { require_once ABSPATH . '/wp-admin/includes/plugin.php'; } $localPluginVersion = array(); foreach (get_plugins() as $plugin) { $localPluginVersion[$plugin['Name']] = $plugin['Version']; } $localThemeVersion = array(); register_theme_directory(get_theme_root()); foreach (wp_get_themes() as $theme) { $name = str_replace('-dist', '', $theme->get('Name')); $localThemeVersion[$name] = $theme->get('Version'); } $params = array( 'service' => 'updater', 'action' => 'get_all_version', ); $url = $this->api . '?' . http_build_query($params); $result = HTTP::get($url, 30); $result = json_decode($result, true); if (!$result) { return false; } $updatePlugins = array(); foreach ($result as $name => $version) { if (!isset($localPluginVersion[$name])) { continue; } if (version_compare($version['v'], $localPluginVersion[$name], '>')) { $updatePlugins[$name] = $version; } } $updateThemes = array(); foreach ($result as $name => $version) { if (!isset($localThemeVersion[$name])) { continue; } if (version_compare($version['v'], $localThemeVersion[$name], '>')) { $updateThemes[$name] = $version; } } return array('plugins' => $updatePlugins, 'themes' => $updateThemes); } public function update() { $latestVersion = $this->getLatestVersion(); $downLoadUrl = urldecode($latestVersion['data']['link']); $content = HTTP::get($downLoadUrl, 60); if (strlen($content) < 8192) { throw new \Exception("下载更新失败", 1); } $upgradeDir = ABSPATH . '/wp-content/upgrade'; if (!file_exists($upgradeDir)) { mkdir($upgradeDir); } $tmpFile = $upgradeDir . '/' . md5($downLoadUrl) . '.zip'; $result = @file_put_contents($tmpFile, $content); if (!$result) { throw new \Exception('写入本地文件失败，请确保"' . $upgradeDir . '"目录可写' , 1); } require ABSPATH . 'wp-admin/includes/class-pclzip.php'; $zip = new \PclZip($tmpFile); $list = $zip->extract(PCLZIP_OPT_PATH, dirname($this->appDir)); $failure = array(); if ($list) { foreach ($list as $item) { if ($item['status'] == 'write_protected' || $item['status'] == 'path_creation_fail' || $item['status'] == 'write_error' || $item['status'] == 'read_error' || $item['status'] == 'invalid_header' ) { $failure[] = $item['stored_filename']; } } } @unlink($tmpFile); return $failure; } public function getUpdateHTML($name, $type) { $html = '<button class="button button-primary" id="check_update">检查更新</button>
                <div id="check_result"></div>'; $html .= "<script type='text/javascript'>
            var imwpfUpdateName = '{$name}';
            var imwpfUpdateType = '{$type}';
        " .file_get_contents(dirname(__DIR__) . '/views/update.js') . "</script>"; return $html; } }