<?php
namespace imwpf\modules\logger; abstract class Normal { const ALL = 0xFF; const OFF = 0; const DEBUG = 1; const INFO = 2; const NOTICE = 4; const WARNING = 8; const ERROR = 16; const CRITICAL = 32; const ALERT = 64; const EMERGENCY = 128; abstract public function log($level, $message); public function setLevel($level) { $this->logLevel = $level; return $this; } public function setConverter($Converter) { $this->Converter = $Converter; return $this; } public function getConverter() { return $this->Converter; } public function emergency($message) { return $this->log(self::EMERGENCY, $message); } public function alert($message) { return $this->log(self::ALERT, $message); } public function critical($message) { return $this->log(self::CRITICAL, $message); } public function error($message) { return $this->log(self::ERROR, $message); } public function warning($message) { return $this->log(self::WARNING, $message); } public function notice($message) { return $this->log(self::NOTICE, $message); } public function info($message) { return $this->log(self::INFO, $message); } public function debug($message) { return $this->log(self::DEBUG, $message); } protected function canRecord($level) { if (($this->logLevel & $level) === 0) { return false; } return true; } protected function logLevelToString($level) { $levelArray = array( self::DEBUG => 'debug', self::INFO => 'info', self::NOTICE => 'notice', self::WARNING => 'warning', self::ERROR => 'error', self::CRITICAL => 'critical', self::ALERT => 'alert', self::EMERGENCY => 'emergency' ); return $levelArray[$level]; } } 