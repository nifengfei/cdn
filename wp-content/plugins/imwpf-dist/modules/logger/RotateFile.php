<?php
 namespace imwpf\modules\logger; class RotateFile extends Normal implements LoggerInterface { protected $today = null; public function __construct(File $Logger) { $this->Logger = $Logger; } public function log($level, $message) { $this->Logger->log($level, $message); $this->rotate(); } public function getPath() { return $this->Logger->getPath(); } public function getName() { return $this->Logger->getName(); } protected function rotate() { if (PHP_SAPI == 'cli') { $this->rotateInCLI(); } else { $this->rotateInCGI(); } } protected function rotateInCLI() { if (!$this->today) { $this->today = strtotime(date("Y-m-d")); } if (time() - $this->today <= 86400) { return; } $logPath = $this->Logger->getPath(); $this->createArchiveLog($logPath, $logName, $this->today); $this->today = strtotime(date('Y-m-d')); return ; } protected function rotateInCGI() { $logPath = $this->Logger->getPath(); $logName = $this->Logger->getName(); $logMetaPath = $logPath . '/.' . $logName; if (is_file($logMetaPath)) { $this->today = strtotime(date('Y-m-d', filemtime($logMetaPath))); } else { $this->today = strtotime(date("Y-m-d")); file_put_contents($logMetaPath, time()); } if (time() - $this->today <= 86400) { return; } $this->createArchiveLog($logPath, $logName, $this->today); $this->today = strtotime(date('Y-m-d')); return ; } protected function createArchiveLog($logPath, $logName, $time) { $suffix = date('Y-m-d', $time); $archiveName = $logName . '.' . $suffix . '.log'; $year = date('Y', $time); $month = date('m', $time); $archiveDir = sprintf("%s/%s/%s", $logPath, $year, $month); if (!file_exists($archiveDir)) { mkdir($archiveDir, 0775, true); } $archivePath = $archiveDir . '/' . $archiveName; if (!file_exists($archivePath)) { $fp = fopen($logPath . '/' . $logName . '.lock', 'w'); if (!flock($fp, LOCK_EX | LOCK_NB)) { return; } rename($logPath . '/' . $logName . '.log', $archivePath); flock($fp, LOCK_UN); fclose($fp); } return; } } 